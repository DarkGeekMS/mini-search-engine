/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cufe.searchengine.api;

import com.cufe.searchengine.model.QueryResult;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "com.cufe.searchengine.codegen.languages.SpringCodegen", date = "2020-03-14T12:05:55.435057+02:00[Africa/Cairo]")

@Validated
@Api(value = "query", description = "the query API")
public interface QueryApi {

	default Optional<NativeWebRequest> getRequest() {
		return Optional.empty();
	}

	/**
	 * GET /query : submit a query
	 *
	 * @param q    string to search for (required)
	 * @param page page of results to fetch, default 1 (optional)
	 * @return successful operation, result could be empty (status code 200)
	 */
	@ApiOperation(value = "submit a query", nickname = "query", notes = "", response = QueryResult.class, responseContainer = "List", tags = {})
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = "successful operation, result could be empty", response = QueryResult.class, responseContainer = "List")})
	@RequestMapping(value = "/query",
		produces = {"application/json"},
		method = RequestMethod.GET)
	default ResponseEntity<List<QueryResult>> query(@NotNull @ApiParam(value = "string to search for", required = true) @Valid @RequestParam(value = "q", required = true) String q, @ApiParam(value = "page of results to fetch, default 1") @Valid @RequestParam(value = "page", required = false) Integer page) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					String exampleString = "{ \"snippet\" : \"snippet\", \"link\" : \"link\", \"title\" : \"title\" }";
					ApiUtil.setExampleResponse(request, "application/json", exampleString);
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}
}
